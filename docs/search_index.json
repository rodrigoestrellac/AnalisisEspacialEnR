[
["index.html", "Herramientas de análisis espacial en R Herramientas de análisis espacial en R ¿Qué necesitamos para arrancar?", " Herramientas de análisis espacial en R Martin Montane 2020-04-29 Herramientas de análisis espacial en R Los datos espaciales requieren un tratamiento particular tanto en su representación, su almacenamiento, sus transformaciones, sus visualizaciones y su análisis.En este compendio de notas de clase se introducen las herramientas necesarias para aplicar algunas de las herramientas más comunes para comenzar a aprovechar todas las oportunidades que los datos espaciales nos brindan. ¿Qué necesitamos para arrancar? En estas notas de clase se usa el lenguaje de programación R. Recomiendo utilizar RStudio para que nos ayude con los proyectos y la edición de los códigos en R Descargar instalar estos dos softwares es muy simple ya que son gratuitos. R de hecho es un lenguaje de programación open source, o de código abierto, lo que significa que cualquiera puede colaborar. Haciendo click aquí van a poder descargar la última versión de R para Windows, Mac o Linux. Una vez que lo hayan descargado solo tienen que instalarlo. Ahora descarguen RStudio, también van a poder elegir la versión que corresponde según su sistema operativo. RStudio va a identificar automáticamente la versión de R que ya tienen instalada, por lo que es importante que instalen RStudio luego de haber instalado R. Una vez que tienen todo esto instalado pueden pasar al primer capítulo de este libro "],
["geocoding-de-la-representación-humana-al-sistema-de-coordenadas.html", "1 Geocoding: de la representación humana al sistema de coordenadas 1.1 ¿Qué es la geocodificación o geocoding? 1.2 API: Interfaz de programación de aplicaciones 1.3 Servicio de Normalización de Datos Geográficos de Argentina 1.4 Google geocode API 1.5 Diferencias entre las dos APIs 1.6 Ejercicios", " 1 Geocoding: de la representación humana al sistema de coordenadas En capítulos anteriores ya descubrimos la particularidad de la representación de los datos espaciales: los ubicamos en base a un modelo de la tierra en lo qu se conoce como Coordinate Reference System (CRS). Esta forma de representación es muy distinta a la que tenemos en nuestras cabezas cuando nos dicen que tenemos que ir a cursar a Figueroa Alcorta 7350. En diversas circunstancias vamos a necesitar convertir esta direcciones a puntos espaciales para poder agregar información relevante para nuestros análisis y encontrar nuevos patrones en nuestros datos. Veamos cómo podemos hacerlo usando servicios del Estado de Argentina y también de Google. 1.1 ¿Qué es la geocodificación o geocoding? Geocoding no es otra cosa que la transformación de una ubicación en el formato que manejamos a diario hacia una coordenada en un sistema de coordenadas de referencia (CRS, en inglés). Esta simple operación es sumamente útil para muchos de nuestros objetivos. Imaginemos que queremos tener alguna medida de la cobertura de atención para la salud en la Ciudad de Buenos Aires. Tenemos la dirección de distintos hospitales y centros de salud, pero no conocemos cómo se distribuyen en el espacio. Carguemos primero estos datos library(tidyverse) salud &lt;- read_csv(&quot;data/HospitalesYCentrosSalud.csv&quot;) Y veamos un poco las variables que tenemos glimpse(salud) ## Rows: 115 ## Columns: 4 ## $ Establecimiento &lt;chr&gt; &quot;Hospital General de Agudos Dr. T. Alvarez&quot;, &quot;Hospital General de Agudos Dr. C. Argerich&quot;, &quot;Hospital General de Ag… ## $ Dirección &lt;chr&gt; &quot;Doctor Juan Felipe Aranguren 2701&quot;, &quot;Pi y Margal 750&quot;, &quot;Diaz Velez 5044&quot;, &quot;Cerviño 3356&quot;, &quot;Pedro Chutro 3380&quot;, &quot;V… ## $ Barrio &lt;chr&gt; &quot;Flores&quot;, &quot;La Boca&quot;, &quot;Caballito&quot;, &quot;Palermo&quot;, &quot;Parque Patricios&quot;, &quot;Flores&quot;, &quot;Coghlan&quot;, &quot;Balvanera&quot;, &quot;Recoleta&quot;, &quot;Ma… ## $ Tipo &lt;chr&gt; &quot;Hospital General de Agudos&quot;, &quot;Hospital General de Agudos&quot;, &quot;Hospital General de Agudos&quot;, &quot;Hospital General de Agu… Geocodificemos con la ayuda del paquete wrapar # Si no lo tenés insalado # require(devtools) # install_github(&quot;martinmontane/wrapar&quot;) library(wrapar) # Agregamos una variable de ID y una columna que indique la provincia salud &lt;- salud %&gt;% mutate(id=row_number(), provincia=&quot;Ciudad de Buenos Aires&quot;) saludGeoreferenciado &lt;- geocodeDirecciones(datos = salud, col_id = &quot;id&quot;, col_direccion = &quot;Dirección&quot;, col_provincia = &quot;provincia&quot;) # Seleccionamos las que tuvimos algún match saludGeoreferenciado &lt;- saludGeoreferenciado %&gt;% filter(nMatchAPI %in% 1) # Le agregamos información que estaba en el anterior data.frame saludGeoreferenciado &lt;- left_join(saludGeoreferenciado, salud, by=c(&quot;id&quot;)) library(sf) # Convertimos a objeto sf saludSf &lt;- st_as_sf(saludGeoreferenciado, coords=c(&quot;ubicacion.lon&quot;,&quot;ubicacion.lat&quot;), crs=4326) Con la ayuda de leaflet hagamos un simple mapa interactivo library(leaflet) leaflet(saludSf) %&gt;% addTiles() %&gt;% addMarkers(label = ~ Establecimiento, popup = ~ Tipo) Nada mal, no? No se preocupen si no entienden lo que hicimos, la única idea de esta introducción es mostrarle lo que van a ser capaces de hacer, nada más ni nada menos. Vamos a ir explicando cómo funciona todo esto. 1.2 API: Interfaz de programación de aplicaciones Sin saberlo, en el ejemplo anterior usamos la API de georreferenciación de Argentina a través de la función geocodeDirecciones() del paquete wrapar ¿Qué es una API? Una API es un conjunto de reglas preestablecidas que nos permiten comunicarnos con servicios que están escritos en diferente lenguaje y con un conjunto de procedimientos específicos. Imaginenlo como que nuestro código de R es español, y la API de geolocalización del Gobierno está en francés, la API podría ser un idioma intermedio, como el inglés, para comunicarnos. Si quieren aprender como comunicarse sin hacerlo por intermedio de wrapar [pueden aprenderlo leyendo los documentos del desarrollo del gobierno]. La idea de wrapar es no tener que aprender otro idioma y hacer todo desde R. Las APIs exceden a este desarrollo particular del gobierno y casi cualquier servicio de cualquier empresa tiene una API para que distintos usuarios puedan hacer consultas sin tener que conocer específicamente cómo es que el servicio trabaja por detrás, es muy útil y eficiente. En este capítulo vamos a usar dos APIs: la del Gobierno, que ya fue presentada, y la de Google. Veamos las funcionalidades y ventajas y desventajas que cada una tiene. 1.3 Servicio de Normalización de Datos Geográficos de Argentina Podemos comunicarnos con el servicio de normalización de datos geográficos de Argentina mediante la función geocodeDirecciones() del paquete wrapar. La función necesita que le pasemos algunos parámetros para poder hacer bien su trabajo. datos: En este parámtro simplemente hay que poner el data.frame que tiene la información que querés georeferencair col_id: es el nombre de la columna que tiene los códigos identificadores únicos de cada uno de los puntos. La función lo hace obligatorio porque va a ser la columna que después va a ser útil para incorporar el resultado de la geocodificación. col_direccion: es el nombre de la columna donde se encuentra la dirección, sin incluid información sobre la localidad, provincia, pais, etc col_provincia: es el nombre de la columna que tiene el nombre de la provincia Con estos cuatro parámetros, cómo hicimos anteriormente, la función pasa las dirección a la API y la API nos devuelve un data.frame con las siguientes variables: id: la columna que identifica a cada uno de los puntos nMatchAPI: nos dice cuántos resultados encontró la API para esa dirección (puede ser más de uno) codigoAPI: Un código que dice “Exito” cuando se pudo comunicar con la API o “Error” cuando hubo algún problema en la comunicación calle.nombre, departamento.nombre, localidad_censal.nombre, y nomenclatura: variables donde tenemos más información sobre la dirección que encontró la API ubicacion.lat y ubicacion.lon las coordenadas de latitud y longitud en el sistema de coordenads EPSG 4326 Ahora que ya sabemos cómo funciona, relean el código que estaba en la parte de arriba ¿Cuántos puntos pudo geolocalizar? 97. En principio, no sabemos si están bien o mal (la API puede haber devuelto simplemente un punto que no correspondía), pero podemos estar seguros que para 18 de nuestros 115 casos no encontró ninguna respuesta. Esto suele pasar cuando la API no es capaz de mapear la dirección que le pasamos con otra que si reconozca. Usando otras herramientas vistas anteriormente, hagamos un mapa de distancia mínima entre cada una de las manzanas de la Ciudad de Buenos Aires y los puntos de los establecimientos de salud. Lo primero que tenemos que hacer para medir las distancias es tener proyectados a los CRS para que la distancia midan metros y no diferencias entre coordenadas latitud y longitud. manzanas &lt;- read_sf(&quot;http://cdn.buenosaires.gob.ar/datosabiertos/datasets/manzanas/manzanas.geojson&quot;) # El objeto manzanas está representado en el CRS que corresponde al ESPG 4326 st_crs(manzanas) ## Coordinate Reference System: ## User input: 4326 ## wkt: ## GEOGCS[&quot;WGS 84&quot;, ## DATUM[&quot;WGS_1984&quot;, ## SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563, ## AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]] # El objeto de saludSf no tiene información sobre el CRS de las coordenadas, pero sabemos que es 4326 st_crs(saludSf) &lt;- 4326 # Convertimos a los dos a la proyección que usa el GCBA manzanas &lt;- st_transform(manzanas, crs=&quot;+proj=tmerc +lat_0=-34.629269 +lon_0=-58.4633 +k=0.9999980000000001 +x_0=100000 +y_0=100000 +ellps=intl +units=m +no_defs &quot;) saludSf &lt;- st_transform(saludSf, crs=&quot;+proj=tmerc +lat_0=-34.629269 +lon_0=-58.4633 +k=0.9999980000000001 +x_0=100000 +y_0=100000 +ellps=intl +units=m +no_defs &quot;) Fìjense que usamos un texto largo en lugar de un código para especificar el CRS de la Ciudad de Buenos Aires. Esto suele pasar cuando una proyección no se encuentra correctamente indexada en el catálogo de EPSG. Lo único que hace EPSG es ponerle un número a cada conjunto de parámetros que determinan un CRS (como los que vemos en el texto que usamos dentro de st_transform). Para buscar los CRS cuando no saben cual usar, les recomiendo https://spatialreference.org/ Ya podemos calcular las distancias. # Tomamos las distancias distanciaManzanas &lt;-st_distance(x = manzanas, y=saludSf) # Nos quedamos con el valor mínimo de distancia entre cada punto y cada manzana distanciaManzanas &lt;- apply(distanciaManzanas,1,min) # Agregamos estos datos al dataset de manzanas manzanas &lt;- manzanas %&gt;% mutate(distMinima=distanciaManzanas) Quizás la parte más rara o con la que están menos familiares es la que dice apply(distanciaManzanas,1,min). La función apply() sirve para iterar, es decir, para realizar el mismo procedimiento para todas las filas o columnas de una matriz. Cuando ponemos 1 luego de pasar a la matriz, va a hacer todo fila por fila, si dice 2 lo hará columna por columna. distanciaManzanas tenía la distancia en metros de cada uno de los centroides de las manzanas contra cada uno de los puntos, por lo cual lo que hace ahí es ir fila por fila y tomar el valor mìnimo (fijense que le pedimos que aplique la función min en el ùltimo argumento). Con esto, ya podemos hacer nuestro gráfico de la accesibilidad de las manzanas a establecimientos de salud: manzanas &lt;- manzanas %&gt;% mutate(distCat=cut(distMinima, breaks = c(0,400,600,900,max(manzanas$distMinima)), labels = c(&quot;Hasta 400 metros&quot;, &quot;Entre 400 y 600 metros&quot;, &quot;Entre 600 y 900 metros&quot;,&quot;Más de 900 metros&quot;), include.lowest = TRUE)) ggplot(manzanas) + geom_sf(aes(fill=distCat),color=NA) + scale_fill_viridis_d(direction = -1,name=&quot;Distancia&quot;) + theme_minimal() + coord_sf(datum = NA) Se observa una importante parte de la Ciudad de Buenos Aires cubierta por al menos un hospital/centro de salud a menos de 400m, con algunas manchas azules en algunas zonas, que puede o no ser explicada por los 18 puntos que nos faltaron georeferenciar. Repliquemos lo mismo, pero ahora usando el servicio de google. 1.4 Google geocode API Google ofrece una amplia gama de servicios para lo que ellos llaman “desarrolladors”, que excede largamente el uso de la API de Google Maps. Sin embargo, la forma para acceder a todos estos servicios tiene como origen una misma cuenta. Desde esta cuenta se pueden ir agregando diversos modulos con funcionalidades distintas. Veamos como registrar la cuenta y habilitar los servicios que necesitamos. Vayan a https://cloud.google.com/ e ingresen con una cuenta de Google (no es necesario que usen una cuenta personal, pueden crear una nueva en caso de ser necesario). Una vez que esten logueados, van a ver un botón en la esquina derecha que dicen “Consola”. Ingresen ahí y desde el menú de navegación en la parte izquierda de la pantalla vayan a APIs y servicios. Ahí van a ver que les va a pedir que creen un proyecto: para usar una API es necesario asociar a un “proyecto” en la plataforma de Google, al que le pueden poner el nombre que ustedes quieran. Lo que nosotros necesitamos ahora es activar las APIs que queremos usar. Google ofrece una multitud de APIs, por lo que más simple es buscarlas en la barra que nos ofrece. Vamos a activar dos APIs: Geocoding API y Distance Matrix API. Primero habilitemos Geocoding API y veamos qué pasa. Si todo funcionó bien, deberían estar en la página de su proyecto nuevo, pero ahora en el submenú de API deberían ver que dentro de API habilitadas tienen una que dice “Geocoding API” ¡Muy bien! Abajo de ese título van a ver que les recomienda otras API en API adicionales. Elijan Distance Matrix API. Habilítenla y listo, ya tenemos las dos APIs con las que vamos a trabajar en el curso. Ahora solo nos queda crear una especie de “contraseña” con la que vamos a vincular nuestra cuenta de Google desde R. Esto es necesario porque las API de Google son servicios pagos. Dan USD 300 de crédito inicial, pero luego hay que ingresar una tarjeta de crédito para continuar usando el servicio, aunque dan USD 200 de crédito todos los meses, el equivalente aproximadamente a 40.000 búsquedas de geocoding. Esta “contraseña” se llama credencial o “key”. Pueden activarla desde el menú de la izquierda en “API y servicios” y luego “credenciales”. Allí pueden crear una credencial, que es básicamente una clave de muchos caracteres que será necesaria para lo que sigue. Importante: Para que efectivamente funcione lo que sigue en esta clase tienen que asociar una tarjeta de crédito a la cuenta de Google. Si bien “regala”&quot; USD 300 en el primer uso, y USD 200 todos los meses, hay que tener cuidado una vez que la tarjeta ha sido ingresada. Si quieren probar el uso de esta herramienta pongan quotas desde su cuenta de Google. Hechas las presentaciones formales, veamos cómo podemos hacer lo mismo con la funcion geocodeGoogle(). Esta función requiere parámetros similares a la de geocodeDirecciones(), veamos: datos: En este parámtro simplemente hay que poner el data.frame que tiene la información que querés georeferencair col_id: es el nombre de la columna que tiene los códigos identificadores únicos de cada uno de los puntos. La función lo hace obligatorio porque va a ser la columna que después va a ser útil para incorporar el resultado de la geocodificación. cols_query: En esta columna hay que pasar un vector character con las variables que queremos que se incluyan en la consulta col_key: nombre de la columna que tiene los datos de la “key” o “credencial” de google col_region: Este parámetro es opcional y se puede delimitar la búsqueda de google a un área. Por default, region no tiene ningún valor por lo cual busca en todo el mundo. Veamosla en función. Este código, así como está, no debería funcionar porque la key es incorrecta. Deben colocar una propia para que funcione # Mismas operaciones que anteriormente, pero esta vez agregamos una columna con la key y de region AR salud &lt;- read_csv(&quot;data/HospitalesYCentrosSalud.csv&quot;) salud &lt;- salud %&gt;% mutate(id=row_number(), provincia=&quot;CABA&quot;, key=&quot;aknfadgnadoigdagoida&quot;, region=&quot;AR&quot;) Ahora ya podemos hacer el geocoding con google ! saludGoogle &lt;- geocodeGoogle(datos = salud, col_id = &quot;id&quot;, cols_query =c(&quot;Dirección&quot;,&quot;provincia&quot;,&quot;Barrio&quot;), col_key = &quot;key&quot;, col_region = &quot;region&quot;) Un mapa rápido en leaflet para ver qué encontró: saludGoogle &lt;- st_as_sf(x = saludGoogle, coords=c(&quot;results.geometry.location.lng&quot;,&quot;results.geometry.location.lat&quot;), crs=4326) leaflet(saludGoogle) %&gt;% addTiles() %&gt;% addMarkers() Parece bastante bien, veamos cuáles son las varaibles que nos devolvió glimpse(saludGoogle) ## Rows: 118 ## Columns: 19 ## $ results.address_components &lt;list&gt; [&lt;data.frame[7 x 3]&gt;, &lt;data.frame[6 x 3]&gt;, &lt;data.frame[8 x 3]&gt;, &lt;data.frame[7 x 3]&gt;, &lt;dat… ## $ results.formatted_address &lt;chr&gt; &quot;Dr. Juan Felipe Aranguren 2701, C1406 FWY, Buenos Aires, Argentina&quot;, &quot;Pi y Margall 750, B… ## $ results.geometry.bounds.northeast.lat &lt;dbl&gt; -34.62389, -34.62763, NA, -34.58102, -34.64273, NA, NA, NA, NA, NA, NA, -34.62497, NA, -34… ## $ results.geometry.bounds.northeast.lng &lt;dbl&gt; -58.46902, -58.36497, NA, -58.40647, -58.40930, NA, NA, NA, NA, NA, NA, -58.50713, NA, -58… ## $ results.geometry.bounds.southwest.lat &lt;dbl&gt; -34.62439, -34.62853, NA, -34.58183, -34.64408, NA, NA, NA, NA, NA, NA, -34.62576, NA, -34… ## $ results.geometry.bounds.southwest.lng &lt;dbl&gt; -58.46994, -58.36607, NA, -58.40746, -58.41131, NA, NA, NA, NA, NA, NA, -58.50831, NA, -58… ## $ results.geometry.location_type &lt;chr&gt; &quot;ROOFTOP&quot;, &quot;ROOFTOP&quot;, &quot;ROOFTOP&quot;, &quot;ROOFTOP&quot;, &quot;GEOMETRIC_CENTER&quot;, &quot;ROOFTOP&quot;, &quot;ROOFTOP&quot;, &quot;ROO… ## $ results.geometry.viewport.northeast.lat &lt;dbl&gt; -34.62279, -34.62673, -34.60807, -34.58008, -34.64205, -34.64232, -34.56350, -34.61630, -3… ## $ results.geometry.viewport.northeast.lng &lt;dbl&gt; -58.46813, -58.36417, -58.43656, -58.40561, -58.40896, -58.45280, -58.46989, -58.40826, -5… ## $ results.geometry.viewport.southwest.lat &lt;dbl&gt; -34.62549, -34.62943, -34.61077, -34.58277, -34.64475, -34.64501, -34.56620, -34.61899, -3… ## $ results.geometry.viewport.southwest.lng &lt;dbl&gt; -58.47083, -58.36687, -58.43926, -58.40831, -58.41166, -58.45550, -58.47259, -58.41096, -5… ## $ results.place_id &lt;chr&gt; &quot;ChIJr_Z5l4zJvJURY2wsvn1SkM8&quot;, &quot;ChIJd9naU8k0o5URZ2n7ZEl68fA&quot;, &quot;ChIJbROcemvKvJURQM5jegacdzU… ## $ results.types &lt;list&gt; [&quot;premise&quot;, &quot;premise&quot;, &quot;street_address&quot;, &quot;premise&quot;, &lt;&quot;establishment&quot;, &quot;health&quot;, &quot;hospital… ## $ status &lt;chr&gt; &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, &quot;OK&quot;, … ## $ id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,… ## $ results.plus_code.compound_code &lt;chr&gt; NA, NA, &quot;9HR6+6R Buenos Aires, Argentina&quot;, NA, NA, &quot;9G4W+G8 Buenos Aires, Argentina&quot;, &quot;CGP… ## $ results.plus_code.global_code &lt;chr&gt; NA, NA, &quot;48Q39HR6+6R&quot;, NA, NA, &quot;48Q39G4W+G8&quot;, &quot;48Q3CGPH+3G&quot;, &quot;48Q39HJR+W5&quot;, &quot;48Q3CH7X+X7&quot;,… ## $ results.partial_match &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ geometry &lt;POINT [°]&gt; POINT (-58.46949 -34.62417), POINT (-58.3655 -34.62803), POINT (-58.43791 -34.60942)… Wow, muchas variables. La primera columna tiene, adentro, un data.frame con información que está en el resto de las columnas, así que vamos a ignorarla. Luego tenemos la formatted_address, que nos permite ver cuál es la calle que efectivamente nos devolvió Google. Luego tenemos cuatro coordenadas bounds, que sirven solo cuando nos devolvió un polígono en lugar de un punto (no le vamos a prestar atención, vamos a trabajar con los puntos que haya devuelto). Luego en location.lat y location.lng tenemos específicamente la latitud y longitud de nuestra dirección. Existen otras columnas, pero con estas y id y partial_match ya podemos seguir. Si están atentos/as a lo que estamos haciendo, van a ver que saludGoogle devolvió 118 resultados cuando mandamos 115 ! Qué fue lo que pasó? Siempre que pasa esto es porque google no encontró un resultado “perfecto” para nuestra consulta y nos devolvió más de uno. Cómo nos damos cuenta? De distintas maneras, pero partial_match, status y mirar a los duplicados nos va a servir mucho. Para empezar, hagamos esto último: veamos cuáles son los que están duplicados # Buscamos los duplicados idsDuplicados &lt;- saludGoogle %&gt;% group_by(id) %&gt;% summarise(conteo=n()) %&gt;% filter(conteo&gt;1) %&gt;% pull(id) # Los vemos con View() View(saludGoogle[saludGoogle$id %in% idsDuplicados,]) En “results.types” van a ver que los ids 78 y 79 son rutas en lugar de puntos, por lo cual no nos sirve: no pudo encontrar un punto que se parezca a la dirección que le pasamos. Vamos a tener que filtrar esos casos. Finalmente, el id 62 nos devuelve dos casos para la misma dirección, uno pareciera ser el hospital y otro la policía (en la misma dirección): eso es algo que no nos interesa. Entonces lo que vamos a hacer es sacar a 78 y 79 y quedarnos solo con uno de los dos del 62. Lo hacemos así: # Filtramos los ids y cualquier caso duplicado en id saludGoogle &lt;- saludGoogle %&gt;% filter(!id %in% c(78,79)) %&gt;% filter(!duplicated(id)) La función duplicated nos elimina a todas las filas que aparecen por segunda vez en el data.frame con el mismo id. En este caso, elimina la segunda vez que aparece el número 62, por lo que funcionó bien. Ahora tenemos 113 puntos georeferenciados, solo perdimos el 78 y el 79. Hagamos el mismo gráfico que hicimos anteriormente: # El objeto de saludGoogle no tiene información sobre el CRS de las coordenadas, pero sabemos que es 4326 st_crs(saludGoogle) &lt;- 4326 # Convertimos a los dos a la proyección que usa el GCBA manzanas &lt;- st_transform(manzanas, crs=&quot;+proj=tmerc +lat_0=-34.629269 +lon_0=-58.4633 +k=0.9999980000000001 +x_0=100000 +y_0=100000 +ellps=intl +units=m +no_defs &quot;) saludGoogle &lt;- st_transform(saludGoogle, crs=&quot;+proj=tmerc +lat_0=-34.629269 +lon_0=-58.4633 +k=0.9999980000000001 +x_0=100000 +y_0=100000 +ellps=intl +units=m +no_defs &quot;) # Tomamos las distancias distanciaManzanas &lt;- st_distance(x = manzanas, y=saludGoogle) # Nos quedamos con el valor mínimo de distancia entre cada punto y cada manzana distanciaManzanas &lt;- apply(distanciaManzanas,1,min) # Agregamos estos datos al dataset de manzanas manzanas &lt;- manzanas %&gt;% mutate(distMinima=distanciaManzanas) manzanas &lt;- manzanas %&gt;% mutate(distCat=cut(distMinima, breaks = c(0,400,600,900,max(manzanas$distMinima)), labels = c(&quot;Hasta 400 metros&quot;, &quot;Entre 400 y 600 metros&quot;, &quot;Entre 600 y 900 metros&quot;,&quot;Más de 900 metros&quot;), include.lowest = TRUE)) ggplot(manzanas) + geom_sf(aes(fill=distCat),color=NA) + scale_fill_viridis_d(direction = -1,name=&quot;Distancia&quot;) + theme_minimal() + coord_sf(datum = NA) Bastante parecida a la geolocalización de la API del gobierno, a simple vista, pero con una mayor cobertura. Veamos, ahora, en cuanto difieren los cálculos de uno y otro dataset 1.5 Diferencias entre las dos APIs Podemos ver las diferencias de muchas maneras, pero poniendo los puntos con un color de cada uno no sería lo mejor, ya que no podemos ver entre cual par de puntos fue la diferencia. Hagamos algo más simple: la distancia entre cada uno de los puntos. distancias &lt;- st_distance(x = saludGoogle[saludGoogle$id %in% saludSf$id,], saludSf[saludSf$id %in% saludGoogle$id,], by_element = TRUE) distancias &lt;- data.frame(distancia=as.numeric(distancias)) ggplot(distancias) + geom_histogram(aes(x=distancia)) + theme_minimal() + labs(x=&quot;Discrepancia (metros)&quot;,y=&quot;Cantidad de casos&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. La diferencia es baja en casi todos los casos, menos uno que está en aproximadamente 900 metros. Si aceptamos una tolerancia de 200 metros de diferencia, la coincidencia es casi total, nada mal. Google tiene una ventaja, igual: devolvió todos menos dos puntos. 1.6 Ejercicios Busquen un conjunto de direcciones que les interese y calculen las distancias entre ellas usando la aplicación de geolocalización de Argentina y la función de distancia del paquete sf. "]
]
